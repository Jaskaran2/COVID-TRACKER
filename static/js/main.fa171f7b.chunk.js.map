{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","props","className","Card","onClick","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","numeral","format","prettyPrintStats","stat","Map","countries","zoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa171f7b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./InfoBox.css\";\r\nimport {Card,CardContent,Typography} from \"@material-ui/core\";\r\n\r\nfunction InfoBox({title,cases,total,...props}){\r\n  return (\r\n    <div className=\"infoBox\">\r\n      <Card\r\n        onClick={props.onClick}>\r\n        <CardContent>\r\n          <Typography className=\"infoBox__title\" color=\"textSecondary\">{title}</Typography>\r\n          <h2 className=\"infoBox__cases\">{cases}</h2>\r\n          <Typography className=\"infoBox__total\" color=\"textSecondary\">{total} Total</Typography>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import {Circle,Popup} from \"react-leaflet\";\r\nimport React from \"react\";\r\nimport numeral from \"numeral\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    multiplier: 500,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    multiplier: 700,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData=(data)=>{\r\n  const sortedData=[...data];\r\n\r\n  sortedData.sort((a,b)=>{\r\n    if(a.cases>b.cases){\r\n      return -1;\r\n    }else{\r\n      return 1;\r\n    }\r\n  })\r\n  return sortedData;\r\n}\r\n\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n\r\nexport const prettyPrintStats=(stat)=>(\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}`:null\r\n)\r\n","import React from \"react\";\r\nimport {MapContainer as LeasfletMap,TileLayer} from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport {showDataOnMap} from \"./util\";\r\n\r\nfunction Map({countries,center,zoom,casesType}){\r\n  return (\r\n    <div className=\"map\">\r\n      <LeasfletMap center={center} zoom={zoom}>\r\n    <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        attribution='&copy; <a href=\"http:osm.org/copyright\">OpenStreetMap</a> contributors' />\r\n\r\n      {showDataOnMap(countries,casesType)}\r\n    </LeasfletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({countries}){\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map(country =>(\r\n        <tr>\r\n        <td>{country.country}</td>\r\n      <td><strong>{numeral(country.cases).format(\"0,0\")}</strong></td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\nimport \"./LineGraph.css\"\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          const chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className=\"graph\">\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React,{useState,useEffect} from \"react\";\nimport './App.css';\nimport {MenuItem,FormControl,Select,Card,CardContent} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport{sortData,prettyPrintStats} from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\nimport Widgets from \"./Widgets\";\n\nfunction App() {\n  const[countries,setCountries]=useState([]);\n  const[country,setCountry]=useState('worldwide');\n  const[countryInfo,setCountryInfo]=useState({});\n  const[tableData,setTableData]=useState([]);\n  const[mapCenter,setMapCenter]=useState({lat:34.80746,lng:-40.476});\n  const[mapZoom,setMapZoom]=useState(3);\n  const[mapCountries,setMapCountries]=useState([]);\n  const[casesType,setCasesType]=useState(\"cases\");\n\n  //Runs a code based on a particular condition\n  useEffect(()=>{\n      const getCountriesData=async() =>{\n        await fetch(\"https://disease.sh/v3/covid-19/countries\").then((response)=> response.json())\n        .then((data)=>{\n          const countries=data.map((country)=>(\n            {\n              name:country.country,\n              value:country.countryInfo.iso2\n            }));\n\n            const sortedData=sortData(data)\n            setTableData(sortedData);\n            setMapCountries(data);\n            setCountries(countries);\n        });\n      };\n      getCountriesData();\n  },[]);\n\n  useEffect(()=>{\n    fetch(\"https://disease.sh/v3/covid-19/all\").then((response)=>response.json())\n    .then(data=>{\n      setCountryInfo(data);\n    })\n  },[])\n\n  const onCountryChange= async (event)=>{\n    const countryCode=event.target.value;\n    setCountry(countryCode);\n\n    const url= countryCode==='worldwide'?'https://disease.sh/v3/covid-19/all':`https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n\n  await fetch(url).then(response =>response.json())\n  .then(data=>{\n    setCountry(countryCode);\n\n    //All the info regarding the countries\n    setCountryInfo(data);\n    setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n    setMapZoom(4);\n  })\n  }\n\n  return (\n    <div className=\"app\">\n    <div className=\"app__left\">\n     <div className=\"app__header\">\n      <h1 className=\"heading\">COVID-19 TRACKER</h1>\n      <FormControl className=\"app__dropdown\">\n      <Select variant=\"outlined\" value={country} onChange={onCountryChange}>\n          <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n          {\n            countries.map(country=>(\n              <MenuItem value={country.value}>{country.name}</MenuItem>\n            ))\n          }\n      </Select>\n    </FormControl>\n    </div>\n\n    <div className=\"app__stats\">\n      <InfoBox\n        onClick={e=>setCasesType('cases')}\n        title=\"Coronavirus cases\"\n        cases={prettyPrintStats(countryInfo.todayCases)}\n        total={countryInfo.cases}\n      />\n    <InfoBox\n        onClick={e=>setCasesType('recovered')}\n      title=\"Recovered\"\n      cases={prettyPrintStats(countryInfo.todayRecovered)}\n      total={countryInfo.recovered}\n    />\n  <InfoBox\n      onClick={e=>setCasesType('deaths')}\n    title=\"Deaths\"\n    cases={prettyPrintStats(countryInfo.todayDeaths)}\n    total={countryInfo.deaths}\n  />\n    </div>\n\n    <Map className=\"app__right\"\n    countries={mapCountries}\n    casesType={casesType}\n    center={mapCenter}\n    zoom={mapZoom}\n  />\n\n\n  </div>\n\n\n      <Card className=\"app__right\">\n          <CardContent>\n            <h3>Live Cases By County</h3>\n            <Table countries={tableData} />\n          <h3>Worldwide New {casesType}</h3>\n        <LineGraph  casesType={casesType} />\n          </CardContent>\n      </Card>\n\n\n  </div>\n  );\n}\n\nexport default App;\n\n// https://disease.sh/v3/covid-19/countries\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}